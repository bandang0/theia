#!/usr/bin/env python

# theia program entry point
import sys
from optparse import OptionParser
from theia import __version__
from theia.main import main
from theia.helpers.interaction import usage, lhelp, shelp
from theia.helpers.core import gbeamInit

# handle Gaussian beam initialization
gbeamInit(sys.argv)

# parse command line and store in options, args
parser = OptionParser(usage = usage)

parser.add_option('-l', '--FreeCAD-lib',
				help = lhelp,
				action = 'store', type = 'string', dest = 'fclib')

parser.add_option('-i', '--no-info',
				help = 'Do not output tracing information to stdout.',
				action = 'store_false', dest = 'info', default = True)

parser.add_option('-w', '--no-warn',
				help = 'Do not output warnings to stdout.',
				action = 'store_false', dest = 'warning', default = True)

parser.add_option('-t', '--no-text',
				help = 'Do not write .out output file.',
				action = 'store_false', dest = 'text', default = True)

parser.add_option('-c', '--no-CAD',
				help = 'Do not generate .fcstd CAD file.',
				action = 'store_false', dest = 'cad', default = True)

parser.add_option('-a', '--anti-clipping',
                help = 'Include anti-clipping in simulation.',
                action = 'store_true', dest = 'antiClip', default = False)

parser.add_option('-s', '--short-ouput',
                help = shelp,
                action = 'store_true', dest = 'short', default = False)

parser.add_option('-v', '--version',
				help = 'Print verion of theia and exit.',
				action = 'store_true', dest = 'askedVersion', default = False)

(options, args) = parser.parse_args(sys.argv)

# handle version queries
if options.askedVersion:
	print __version__
	sys.exit(0)

# handle non-args case
if len(args) == 1:
	parser.print_help()
	sys.exit(0)

# run theia
if __name__ == '__main__':
	main(options, args)
